---
- name: Debug os version
  debug:
    msg: "os: {{ ansible_os_family | lower }}"

- name: Load a variable file based on the OS type
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - '{{ansible_os_family | lower }}-packages.yaml'
      paths:
        - 'vars'

- name: Install dependency packages
  package:
    name: "{{ item }}"
    state: present
  loop:
    - curl
    - wget
    - tar
    - zip
    - unzip

- name: Enabled ntp server locally
  when: enable_ntp_server
  block:
    - name: Install package ntp-server
      package: 
        name: "{{ item }}"
        state: latest
      loop: "{{ ntp_server }}"
    - name: Systemctl enable service ntp-server
      ansible.builtin.systemd_service:
        name: "chronyd"
        enabled: true
        daemon_reload: true
        state: started
    - name: Permit traffic in default zone for ntp service
      when: ansible_facts['os_family'] == 'RedHat'
      ansible.posix.firewalld:
        service: ntp
        permanent: true
        state: enabled
        immediate: true
    - name: Enable service httpd
      when: ansible_facts['os_family'] == 'Debian'
      community.general.ufw:
        rule: allow
        port: ntp
        proto: tcp
      
- name: Enabled airgap
  when: enable_airgap
  block:
  - name: Install webserver
    package:
      name: "{{ webserver }}"
      state: latest
  - name: Enable service httpd
    ansible.builtin.systemd_service:
      name: "{{ webserver }}"
      enabled: true
      state: started
      daemon_reload: true
  - name: Permit traffic in default zone for httpd service
    when: ansible_facts['os_family'] == 'RedHat'
    ansible.posix.firewalld:
      port: 80/tcp
      permanent: true
      immediate: true
      state: enabled
  - name: Permit traffic in default zone for apache2 service
    when: ansible_facts['os_family'] == 'Debian'
    community.general.ufw:
      rule: allow
      port: 80
      proto: tcp
  - name: Create a directory if it does not exist for webserver
    ansible.builtin.file:
      path: /var/www/html
      state: directory
      mode: '0777'
  
- name: Upload binary nke-airgap to server
  when: enable_airgap_nke
  block:
  - name: Check the file 'airgap-ntnx-{{ airgap_nke.version }}.tar.gz' exists
    stat:
      path: '/tmp/airgap-ntnx-{{ airgap_nke.version }}.tar.gz'
    register: file_airgap_nke_upload
  - name: Copy file 'airgap-ntnx-{{ airgap_nke.version }}.tar.gz' to server
    copy:
      src: "{{ airgap_nke.local_folder }}/airgap-ntnx-{{ airgap_nke.version }}.tar.gz"
      dest: "/tmp/airgap-ntnx-{{ airgap_nke.version }}.tar.gz"
    when: 
    - not file_airgap_nke_upload.stat.exists
    - direct_download == false
  - name: Create a directory if it does not exist for site nke-airgap
    ansible.builtin.file:
      path: '/var/www/html{{ airgap_nke.site_folder }}'
      state: directory
      mode: '0777'
  - name: Extract '/tmp/airgap-ntnx-{{ airgap_nke.version }}.tar.gz' into '{{ airgap_nke.site_folder }}'
    ansible.builtin.unarchive:
      src: '/tmp/airgap-ntnx-{{ airgap_nke.version }}.tar.gz'
      dest: '/var/www/html{{ airgap_nke.site_folder }}'
      remote_src: yes
  - name: Check the file 'airgap-manifest.json' exists
    stat:
      path: '{{ airgap_nke.site_folder }}/airgap-manifest.json'
    register: file_airgap_nke_manifest_upload
  - name: Copy file 'airgap-manifest.json' to server
    copy:
      src: "{{ airgap_nke.local_folder }}/airgap-manifest.json"
      dest: "/var/www/html{{ airgap_nke.site_folder }}/airgap-manifest.json"
    when: 
    - not file_airgap_nke_manifest_upload.stat.exists
    - direct_download == false
  - name: Fix 'support_tools' permissions
    ansible.builtin.file: 
      path: '/var/www/html{{ airgap_nke.site_folder }}' 
      mode: 0777
      state: directory 
      recurse: yes

- name: Upload binary object-airgap to server
  when: enable_airgap_object
  block:
  # upload object-{{ airgap_object.version }}.tar.gz
  - name: Check the file 'object-{{ airgap_object.version }}.tar.gz' exists
    stat:
      path: '/tmp/objects-{{ airgap_object.version }}.tar.gz'
    register: file_airgap_object_upload
  - name: Copy file 'objects-{{ airgap_object.version }}.tar.gz' to server
    copy:
      src: "{{ airgap_object.local_folder }}/objects-{{ airgap_object.version }}.tar.gz"
      dest: "/tmp/objects-{{ airgap_object.version }}.tar.gz"
    when: 
    - not file_airgap_object_upload.stat.exists
    - direct_download == false
  # upload lcm_darksite_msp-{{ airgap_object.msp_version }}.tar.gz
  - name: Check the file 'lcm_darksite_msp-{{ airgap_object.msp_version }}.tar.gz' exists
    stat:
      path: '/tmp/lcm_darksite_msp-{{ airgap_object.msp_version }}.tar.gz'
    register: file_airgap_object_msp_upload
  - name: Copy file 'lcm_darksite_msp-{{ airgap_object.version }}.tar.gz' to server
    copy:
      src: "{{ airgap_object.local_folder }}/lcm_darksite_msp-{{ airgap_object.msp_version }}.tar.gz"
      dest: "/tmp/lcm_darksite_msp-{{ airgap_object.msp_version }}.tar.gz"
    when: 
    - not file_airgap_object_msp_upload.stat.exists
    - direct_download == false
  # upload nutanix_compatibility_bundle.tar.gz
  - name: Check the file 'nutanix_compatibility_bundle.tar.gz' exists
    stat:
      path: '/tmp/nutanix_compatibility_bundle.tar.gz'
    register: file_lcm_ntnx_compat_upload
  - name: Copy file 'nutanix_compatibility_bundle.tar.gz' to server
    copy:
      src: "{{ airgap_object.local_folder }}/nutanix_compatibility_bundle.tar.gz"
      dest: "/tmp/nutanix_compatibility_bundle.tar.gz"
    when: 
    - not file_lcm_ntnx_compat_upload.stat.exists
    - direct_download == false
  - name: Create a directory if it does not exist for site nke-airgap
    ansible.builtin.file:
      path: '/var/www/html{{ airgap_object.site_folder }}'
      state: directory
      mode: '0777'
  - name: Extract '/tmp/objects-{{ airgap_object.version }}.tar.gz' into '{{ airgap_object.site_folder }}'
    ansible.builtin.unarchive:
      src: '/tmp/objects-{{ airgap_object.version }}.tar.gz'
      dest: '/var/www/html{{ airgap_object.site_folder }}'
      remote_src: yes
  - name: Extract '/tmp/lcm_darksite_msp-{{ airgap_object.msp_version }}.tar.gz' into '{{ airgap_object.site_folder }}'
    ansible.builtin.unarchive:
      src: '/tmp/lcm_darksite_msp-{{ airgap_object.msp_version }}.tar.gz'
      dest: '/var/www/html{{ airgap_object.site_folder }}'
      remote_src: yes
  - name: Extract 'nutanix_compatibility_bundle.tar.gz' into '{{ airgap_object.site_folder }}'
    ansible.builtin.unarchive:
      src: '/tmp/nutanix_compatibility_bundle.tar.gz'
      dest: '/var/www/html{{ airgap_object.site_folder }}'
      remote_src: yes

  - name: Fix 'support_tools' permissions
    ansible.builtin.file: 
      path: '/var/www/html{{ airgap_object.site_folder }}'
      mode: 0777
      state: directory 
      recurse: yes